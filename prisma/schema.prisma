// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(uuid())
  username         String      @unique
  password         String
  email            String      @unique
  notes            Note[]
  tables           Table[]
  events           Event[]
  projects         Project[]
  tasks            Task[]
  sprints          Sprint[]
  milestones       Milestone[]
  createdAt        DateTime    @default(now())
  Session          Session[]
  resetToken       String?
  resetTokenExpiry DateTime?
}

model Session {
  id        String   @id @default(uuid()) // UUID for Session ID
  userId    String // Foreign key referencing User ID (UUID)
  user      User     @relation(fields: [userId], references: [id]) // Relation to User
  createdAt DateTime @default(now()) // Timestamp of session creation
  expiresAt DateTime // Expiration timestamp
}

model Note {
  id            String   @id @default(uuid()) // UUID for Note ID
  title         String // Note title
  content       String? // The content of the note
  userId        String // Foreign key for the user who created the note
  createdAt     DateTime @default(now()) // Timestamp of creation
  lastUpdatedAt DateTime @updatedAt // Timestamp of last update

  // Relationship with User model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Table {
  id            String   @id @default(uuid()) // UUID for Table ID
  title         String // Table title
  rows          Row[] // Relationship to rows
  columns       Column[] // Relationship to columns
  userId        String // Foreign key for the user who created the table
  createdAt     DateTime @default(now()) // Timestamp of creation
  lastUpdatedAt DateTime @updatedAt // Timestamp of last update

  // Relationship with User model
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Row {
  id       String @id @default(uuid()) // UUID for Row ID
  tableId  String // Foreign key to Table
  table    Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells    Cell[] // Relationship to cells
  rowIndex Int // Row index for ordering
}

model Column {
  id          String  @id @default(uuid()) // UUID for Column ID
  tableId     String // Foreign key to Table
  table       Table   @relation(fields: [tableId], references: [id], onDelete: Cascade)
  header      String? // Optional column header
  cells       Cell[] // Relationship to cells
  columnIndex Int // Column index for ordering
}

model Cell {
  id              String  @id @default(uuid()) // UUID for Cell ID
  rowId           String // Foreign key to Row
  row             Row     @relation(fields: [rowId], references: [id], onDelete: Cascade)
  columnId        String // Foreign key to Column
  column          Column  @relation(fields: [columnId], references: [id], onDelete: Cascade)
  value           String? // The content of the cell (e.g., text, number)
  backgroundColor String? // Background color (USE HEX)
}

model Event {
  id          String   @id @default(uuid()) // UUID for Event ID
  title       String // Event title
  description String // Event description
  duration    String // Duration of the event
  reminder    Boolean // Changes the status of the event to be a reminder
  allDay      Boolean // if the event is to take place all day
  startTime   String // Event start time
  endTime     String? // Event end time
  date        DateTime // Date of the event
  userId      String // User who created the event
  user        User     @relation(fields: [userId], references: [id]) // Relation to User
  createdAt   DateTime @default(now()) // Timestamp of creation
}

model Project {
  id         String      @id @default(uuid())
  title      String
  icon       String? // Can be an emoji or icon URL
  status     Boolean // Determines if the Project is active
  description String // Description of Project
  tasks      Task[] // Relation to Task
  sprints    Sprint[] // Relation to Sprint
  milestones Milestone[] // Relation to Milestone
  userId     String // Foreign key to User
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt()
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String? // Detailed task description
  tags        String[] // For filtering/categorization
  points      Int? // Story points estimation
  status      String     @default("Todo") // e.g., Todo, In Progress, Done
  userId      String // Foreign key to User (Task owner/creator)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId   String // Foreign key to Project
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sprintId    String? // Foreign key to Sprint (optional)
  sprint      Sprint?    @relation(fields: [sprintId], references: [id], onDelete: SetNull)
  milestoneId String? // Foreign key to Milestone (optional)
  milestone   Milestone? @relation(fields: [milestoneId], references: [id], onDelete: SetNull)
  dueDate     DateTime? // Optional deadline
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt()
}

model Sprint {
  id        String   @id @default(uuid())
  title     String
  startDate DateTime
  endDate   DateTime
  status    String   @default("Planned") // Planned, Active, Completed
  projectId String // Foreign key to Project
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[] // Relation to Task
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Milestone {
  id         String    @id @default(uuid())
  title      String
  targetDate DateTime? // Target completion date
  projectId  String // Foreign key to Project
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks      Task[] // Relation to Task
  userId     String // Foreign key to User (Responsible user)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt()
}
