// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) // UUID for User ID
  username  String   @unique              // Username must be unique
  password  String                              // Hashed password
  email     String   @unique              // User's email
  notes     Note[]                             // User's notes
  tables    Table[]                            // User's tables
  createdAt DateTime @default(now())         // Timestamp of creation
}

model Note {
  id          String   @id @default(uuid()) // UUID for Note ID
  title       String                               // Note title
  content     String?                              // The content of the note
  userId      String                               // Foreign key for the user who created the note
  createdAt   DateTime @default(now())             // Timestamp of creation
  lastUpdatedAt DateTime @updatedAt              // Timestamp of last update

  // Relationship with User model
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Table {
  id          String   @id @default(uuid())  // UUID for Table ID
  title       String                              // Table title
  rows        Row[]                                // Relationship to rows
  columns     Column[]                             // Relationship to columns
  userId      String                              // Foreign key for the user who created the table
  createdAt   DateTime @default(now())            // Timestamp of creation
  lastUpdatedAt DateTime @updatedAt               // Timestamp of last update

  // Relationship with User model
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Row {
  id        String   @id @default(uuid())  // UUID for Row ID
  tableId   String                              // Foreign key to Table
  table     Table   @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells     Cell[]                              // Relationship to cells
  rowIndex  Int                                  // Row index for ordering
}

model Column {
  id         String   @id @default(uuid()) // UUID for Column ID
  tableId    String                              // Foreign key to Table
  table      Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)
  header     String?                             // Optional column header
  cells      Cell[]                               // Relationship to cells
  columnIndex Int                                 // Column index for ordering
}

model Cell {
  id             String   @id @default(uuid()) // UUID for Cell ID
  rowId          String                               // Foreign key to Row
  row            Row     @relation(fields: [rowId], references: [id], onDelete: Cascade)
  columnId       String                                // Foreign key to Column
  column         Column  @relation(fields: [columnId], references: [id], onDelete: Cascade)
  value          String?                               // The content of the cell (e.g., text, number)
  backgroundColor String?                             // Background color (USE HEX)
}
